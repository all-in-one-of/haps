/*
 *  Houdini Parameters for appleseed
 */

//
// This document is under CC-3.0 Attribution-Share Alike 3.0
//       http://creativecommons.org/licenses/by-sa/3.0/
//  Attribution:  There is no requirement to attribute the author.

#include "$HFS/houdini/soho/parameters/CommonMacros.ds"


// Labels for folder tabs
#define OUTPUT_LABEL			"Output"
#define DEEP_OUTPUT_LABEL		"Deep Output"
#define CRYPTO_OUTPUT_LABEL		"Cryptomatte"
#define EXTRA_IMAGE_LABEL		"Extra Image Planes"
#define META_DATA_LABEL			"Meta Data"
#define RENDERING_MAIN_LABEL		"Rendering"
#define RENDERING_RENDER_LABEL		"Render"
#define RENDERING_SAMPLING_LABEL	"Sampling"
#define RENDERING_BAKING_LABEL		"Baking"
#define RENDERING_SHADING_LABEL		"Shading"
#define RENDERING_PR_LABEL		    "Path Tracing"
#define RENDERING_SPPM_LABEL		"SPPM"
#define RENDERING_DICING_LABEL		"Dicing"
#define RENDERING_GEOMETRY_LABEL	"Geometry"
#define RENDERING_STATISTICS_LABEL	"Statistics"
#define RENDERING_PBR_LABEL		"PBR"
#define RENDERING_DRIVER_LABEL		"Driver"

#define APS_QUANTIZE_MENU	\
	menu { \
	    "8"		"8 bit integer" \
	    "16"	"16 bit integer" \
	    "half"	"16 bit float" \
	    "float"	"32 bit float" \
	}

// Other pixel filters:
//	"ubox"			- Special unit box filter
#define APS_PIXEL_FILTERS \
	"box -w 1"		"Unit Box Filter" \
	"gaussian -w 2"		"Gaussian 2x2" \
	"gaussian -w 3"		"Gaussian 3x3 (softer)" \
	"gaussian -w 2 -r 1"	"Gaussian 2x2 with noisy sample refiltering" \
	"combine -t 20.0"	"Ray Histogram Fusion" \
	"bartlett -w 2"		"Bartlett (triangle)" \
	"catrom -w 3"		"Catmull-Rom" \
	"hanning -w 2"		"Hanning" \
	"blackman -w 2"		"Blackman" \
	"sinc -w 3"		"Sinc (sharpening)" \
	"edgedetect"		"Edge Detection Filter" \
	"minmax min"		"Closest Sample Filter" \
	"minmax max"		"Farthest Sample Filter" \
	"minmax median"		"Median Sample Filter" \
	"minmax edge"		"Disable Edge Antialiasing" \
	"minmax ocover"		"Object With Most Pixel Coverage (average)" \
	"minmax idcover"	"Object With Most Coverage (no filtering)" \
	"minmax omin"		"Object With Most Coverage (minimum z-value)" \
	"minmax omax"		"Object With Most Coverage (maximum z-value)" \
	"minmax omedian"	"Object With Most Coverage (median z-value)" \
	"denoise optix -a basecolor"	"NVIDIA OptiX Denoiser"

#define APS_PIXEL_FILTER_MENU	\
	menureplace { \
	    APS_PIXEL_FILTERS \
	}

#define APS_AUX_PIXEL_FILTER_MENU	\
	menureplace { \
	    ""			"Inherit from main plane" \
	    APS_PIXEL_FILTERS \
	}

#define APS_FILTER_MENU	\
	menu { \
	    "box"		    "Box Filter" \
	    "triangle"		"Triangle Filter" \
	    "gaussian"		"Gaussian" \
	    "mitchell"		"Mitchell" \
	    "bspline"		"BSpline" \
	    "catrom"		"Catmull-Rom" \
	    "lanczos"		"Lanczs" \
	    "blackman"		"Blackman" \
	}

#define APS_PIXEL_FILTER_SIZE_MENU	\
	menu { \
	    "2"		"2" \
	    "3"		"3" \
	    "1"		"1" \
	}

#define APS_TYPE_MENU	\
	menu { \
	    "float"	"Float Type" \
	    "vector"	"Vector Type" \
	    "vector4"	"Vector4 Type" \
	    "unitvector" "Unit Vector Type" \
	}

#define APS_IMAGE_FORMAT_MENU \
    menu { \
        ""		"Infer from filename" \
        "OpenEXR"	"Open EXR (EXR)" \
        "TIFF"		"Tagged Image File (TIFF)" \
        "PNG"		"Portable Network Graphics (PNG)" \
        "Targa"		"Targa (TGA)" \
        "JPEG"		"JPEG (JPG)" \
    }

#define APS_DISABLE_AUXPLANE	\
	disablewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" == \"\" }"

#define APS_DISABLE_AUXPLANE_NONLPE	\
	disablewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" =~ \"()|(lpe:).+\" }"

#define APPLESEED_PROP(CLASS, NAME)	\
	parmtag	{ appleseed_class	CLASS } \
	parmtag	{ appleseed_name	NAME }

#define	APPLESEED_FORCE_OUTPUT	parmtag { appleseed_force_output	"1" }
#define APPLESEED_FORCE_TYPE(TYPE)	parmtag { appleseed_type TYPE }

{
    name	appleseed
    label	"Appleseed"
    parmtag	{ spare_opfilter	"!!SHOP/PROPERTIES!!" }
    parmtag	{ spare_classtags	"render" }

#include "CommonControl.ds"
#include "CommonView.ds"
#include "CommonObject.ds"
// #include "Instance.ds"

    parm {
	SOHO_TOGGLE(aps_dof, "Enable Depth Of Field", RENDERING_MAIN_LABEL, 0)
    }
    parm {
	SOHO_FLOAT(focus, "Focus Distance", "Sampling", 5)
	range	{ 0.001 1000 }
	disablewhen	"{ aps_dof == 0 }"
	APPLESEED_PROP("camera", "focus")
    }
    parm {
	SOHO_FLOAT(fstop, "F-Stop",	"Sampling",	5.6)
	range	{ 1.4 22 }
	logarithmic
	disablewhen	"{ aps_dof == 0 }"
	APPLESEED_PROP("camera", "fstop")
    }


    //
    //  Output Category
    //
    collection {
	name	aps_picture_group
	label	"Output Picture"
	parmtag	{ spare_category	OUTPUT_LABEL }

	parm
	{
	    // NOTE:  This parameter is copied/specialized in IFDmantra.ds
	    SOHO_FILE(aps_picture, "Output Picture", OUTPUT_LABEL, "ip")
	    parmtag	{ filechooser_mode	"write" }
	    menureplace {
		[ "echo `pythonexprs(\"__import__('toolutils').parseDialogScriptMenu('FBrender')\")`" ]
		[ ]
	    }
	    APPLESEED_PROP("image", "filename")
	}
	parm {
	    // NOTE:  This parameter is copied/specialized in IFDmantra.ds
	    SOHO_STRING(aps_device, "Output Device", OUTPUT_LABEL, "")
            APS_IMAGE_FORMAT_MENU
	    APPLESEED_PROP("image", "device")
	}
    }
   

    // PIXEL FILTER
    parm {
	SOHO_STRING(aps_pfilter, "Pixel Filter", OUTPUT_LABEL, "gaussian")
	APS_PIXEL_FILTER_MENU
	APPLESEED_PROP("plane", "pfilter")
    }
    // PIXEL FILTER SIZE
    parm {
	SOHO_STRING(aps_pfilter_size, "Pixel Filter Size", OUTPUT_LABEL, "2")
	APS_PIXEL_FILTER_SIZE_MENU
	APPLESEED_PROP("plane", "pfilter_size")
    }

    // CRYPTOMATTE
    multiparm {
	name	    aps_cryptolayers
	label	    "Cryptomatte Layers"
	default	    { 0 }
	parmtag	{ spare_category CRYPTO_OUTPUT_LABEL }
	parm {
	    name	"aps_cryptolayerenable#"
	    type	toggle
	    default	{ 1 }
	    nolabel
	    joinnext
	}
	parm {
            name	"aps_cryptolayerprop#"
            label	"Property"
            type	string
            default	{ "materialname" }
	    menureplace {
			"materialname"	 "Material Name"
			"name"		 "Object Name"
	    }
	}
	parm {
	    name	"aps_cryptolayername#"
            label	"Channel Name"
	    type	string
	    default	{ "CryptoMaterial" }
	}
	parm {
	    name	"aps_cryptolayerrank#"
            label	"Overlap Limit"
            type	int
            default	{ 6 }
	    range       { 1 10 }
	}
	parm {
	    name	"aps_cryptolayeroutputenable#"
	    type	toggle
	    default	{ 0 }
	    nolabel
	    joinnext
	}
	parm {
	    name	"aps_cryptolayeroutput#"
            label	"Different File"
	    type	file
	    disablewhen	"{ aps_cryptolayeroutputenable# != 1 }"
	    default	{ "$HIP/CryptoMaterial.exr" }
	    parmtag     { "filechooser_mode" "write" }
	}
	parm {
	    name	"aps_cryptolayersidecarenable#"
	    type	toggle
	    default	{ 0 }
	    nolabel
	    joinnext
	}
	parm {
	    name	"aps_cryptolayersidecar#"
            label	"Manifest File"
	    type	string
	    disablewhen	"{ aps_cryptolayersidecarenable# != 1 }"
	    default	{ "CryptoMaterial.json" }
	}
    }

    parm {
	SOHO_TOGGLE(aps_clamproughness,
	    "Constrain by Maximum Roughness",
	    RENDERING_SHADING_LABEL, 0)
	APPLESEED_PROP("renderer", "clamproughness")
    }


   

#define QUICK_PLANE(NAME, LABEL) \
	parm { SOHO_TOGGLE(NAME, LABEL, EXTRA_IMAGE_LABEL, 0) }
#define QUICK_PLANE_CH(VAR, NAME, LABEL) \
	parm { SOHO_TOGGLE(NAME, LABEL, EXTRA_IMAGE_LABEL, 0) } \
	parm { \
	    SOHO_STRING(NAME##_channel, VAR##" Channel Name", \
		    EXTRA_IMAGE_LABEL, VAR) \
	    disablewhen "{ \""#NAME"\" == 0 }" \
	}
    QUICK_PLANE_CH("P",  aps_quickplane_P,	    "Shading Position (P)")
    QUICK_PLANE_CH("Pz", aps_quickplane_Pz,	    "Shading Depth (Pz)")
    QUICK_PLANE_CH("N",  aps_quickplane_N,	    "Shading Normal (N)")

    QUICK_PLANE(aps_quickplane_all_comp,		    "Combined Lighting (per-component)")
    QUICK_PLANE(aps_quickplane_all_emission,	    "Combined Emission")
    QUICK_PLANE(aps_quickplane_direct_comp,	    "Direct Lighting (per-component)")
    QUICK_PLANE(aps_quickplane_indirect_comp,	    "Indirect Lighting (per-component)")

    QUICK_PLANE(aps_quickplane_direct_noshadow,	    "Direct Unshadowed")
    QUICK_PLANE(aps_quickplane_direct_noshadow_comp, "Direct Unshadowed (per-component, PBR only)")
    QUICK_PLANE(aps_quickplane_direct_samples,	    "Direct Ray Samples")
    QUICK_PLANE(aps_quickplane_indirect_samples,	    "Indirect Ray Samples")
    QUICK_PLANE(aps_quickplane_sss,		    "SSS Single/Multi")

    // UV rendering planes
    QUICK_PLANE_CH("Cu", aps_quickplane_Cu,	    "Curvature (Cu)")
    QUICK_PLANE_CH("Cv", aps_quickplane_Cv,	    "Cavity (Cv)")
    QUICK_PLANE_CH("Nt", aps_quickplane_Nt,	    "Tangent-Space Normal (Nt)")
    QUICK_PLANE_CH("Ds", aps_quickplane_Ds,	    "Displacement (Ds)")
    QUICK_PLANE_CH("Vd", aps_quickplane_Vd,	    "Vector Displacement (Vd)")
    QUICK_PLANE_CH("Vdt",aps_quickplane_Vdt,	    "Tangent-Space Vector Displacement (Vdt)")
    QUICK_PLANE_CH("Oc", aps_quickplane_Oc,	    "Occlusion (Oc)")
    QUICK_PLANE_CH("Th", aps_quickplane_Th,	    "Thickness (Th)")
    QUICK_PLANE_CH("Ab", aps_quickplane_Ab,	    "Surface Alpha (Ab)")
    QUICK_PLANE_CH("basecolor", aps_quickplane_basecolor,    "Surface Unlit Base Color (basecolor)")
    QUICK_PLANE_CH("diffcolor", aps_quickplane_diffcolor,    "Surface Unlit Diffuse Color (diffcolor)")
    QUICK_PLANE_CH("speccolor", aps_quickplane_speccolor,    "Surface Unlit Specular Color (speccolor)")
    QUICK_PLANE_CH("emitcolor", aps_quickplane_emitcolor,    "Surface Emission Color (emitcolor)")
    QUICK_PLANE_CH("ssscolor", aps_quickplane_ssscolor,	    "Surface SSS Color (ssscolor)")
    QUICK_PLANE_CH("metallic", aps_quickplane_metallic,	    "Surface Metallic (metallic)")
    QUICK_PLANE_CH("specrough", aps_quickplane_specrough,    "Surface Specular Roughness (specrough)")
#undef QUICK_PLANE

    multiparm {
	name	aps_numpathmap
	label	"Path Map Entries"
	parmtag	{ spare_category	RENDERING_DRIVER_LABEL }

	parm {
	    SOHO_PARM("aps_pathmap#", "Source/Target Map",
		    RENDERING_DRIVER_LABEL, string, 2, "" "")
	}
    }
    parm {
        SOHO_TOGGLE(aps_extractimageplanes, "Extract Image Planes",
		EXTRA_IMAGE_LABEL, 0)
	APPLESEED_PROP("renderer", "extractimageplanes")
    }
    parm {
        SOHO_TOGGLE(aps_extractremoveintermediate, "Remove Intermediate Output",
		EXTRA_IMAGE_LABEL, 0)
        hidewhen "{ \"aps_extractimageplanes\" == 0 }"
	APPLESEED_PROP("renderer", "extractremoveintermediate")
    }
    parm {
        SOHO_STRING(aps_extractimageplanesformat, "Extract Format",
		EXTRA_IMAGE_LABEL, "")
        APS_IMAGE_FORMAT_MENU
        hidewhen "{ \"aps_extractimageplanes\" == 0 }"
	APPLESEED_PROP("renderer", "extractimageplanesformat")
    }
    parm {
	SOHO_STRING(aps_extractlinearplanes, "Extracted Linear Planes",
		"Driver",
		"`propertys('aps_quickplane_Nt_channel','Nt')`,`propertys('aps_quickplane_Ds_channel','Ds')`,`propertys('aps_quickplane_Vd_channel','Vd')`,`propertys('aps_quickplane_Vdt_channel','Vdt')`,`propertys('aps_quickplane_Cv_channel','Cv')`,`propertys('aps_quickplane_Th_channel','Th')`,`propertys('aps_quickplane_Cu_channel','Cu')`,`propertys('aps_quickplane_N_channel','N')`,`propertys('aps_quickplane_P_channel','P')`"
	)
	APPLESEED_PROP("renderer", "extractlinearplanes")
        hidewhen "{ \"aps_extractimageplanes\" == 0 }"
    }
    parm {
	SOHO_STRING(aps_bake_alphadestplanes, "Copy Alpha To Planes",
		"Driver",
		"`propertys('aps_quickplane_basecolor_channel','basecolor')`,`propertys('aps_quickplane_diffcolor_channel','diffcolor')`"
	)
	APPLESEED_PROP("renderer", "bake_alphadestplanes")
        hidewhen "{ \"aps_extractimageplanes\" == 0 }"
    }
    parm {
        SOHO_STRING(aps_extractseparator, "Name Separator",
		EXTRA_IMAGE_LABEL, "_")
        hidewhen "{ \"aps_extractimageplanes\" == 0 }"
	APPLESEED_PROP("renderer", "extractseparator")
    }
    parm {
	name	aps_channel_names_seperator_bar
	label	"Separator"
	type	separator
	parmtag	{ spare_category EXTRA_IMAGE_LABEL }
    }
    multiparm {
	name	aps_numaux
	label	"Extra Image Planes"
	parmtag	{ spare_category	EXTRA_IMAGE_LABEL }

	parm {
	    SOHO_TOGGLE("aps_disable_plane#", "Disable Plane #",
		    EXTRA_IMAGE_LABEL, 0)
	    joinnext
	}
	parm {
	    SOHO_TOGGLE("aps_excludedcm_plane#", "Exclude from DCM",
		    EXTRA_IMAGE_LABEL, 0)
	    hidewhen	"{ aps_deepresolver != camera }"
	}
	parm {
	    SOHO_STRING("aps_variable_plane#", "VEX Variable",
		    EXTRA_IMAGE_LABEL, "")
	    menureplace {
		[ "__import__('toolutils').parseDialogScriptMenu('MantraPlanes', forhscript=False)" ]
		language	python
	    }
	    disablewhen	"{ \"aps_disable_plane#\" == 1 }"
	    callback	"`pythonexprs(\"__import__('toolutils').updatePlaneType($script_multiparm_index, \'$script_value\')\")`"
	}
	parm {
	    SOHO_STRING("aps_vextype_plane#", "VEX Type",
		    EXTRA_IMAGE_LABEL, "vector")
	    APS_TYPE_MENU
	    disablewhen	"{ \"aps_disable_plane#\" == 1 }"
	}
	parm {
	    SOHO_STRING("aps_channel_plane#", "Channel Name", EXTRA_IMAGE_LABEL, "")
	    APS_DISABLE_AUXPLANE
	}
	parm {
	    SOHO_TOGGLE("aps_usefile_plane#", "Different File", EXTRA_IMAGE_LABEL, 0)
	    hidewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" == \"\" } { \"aps_picture\" == \"ip\" }"
	    nolabel
	    joinnext
	}
	parm {
	    SOHO_FILE("aps_filename_plane#", "Different File", EXTRA_IMAGE_LABEL, "")
	    parmtag	{ filechooser_mode	"write" }
	    hidewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" == \"\" } { \"aps_picture\" == \"ip\" }"
	    disablewhen "{ \"aps_usefile_plane#\" == 0 }"
	    menureplace {
		[ "echo `pythonexprs(\"__import__('toolutils').parseDialogScriptMenu('FBrender')\")`" ]
		[ ]
	    }
	}
	parm {
	    SOHO_STRING("aps_quantize_plane#", "Quantize", EXTRA_IMAGE_LABEL, "half")
	    APS_QUANTIZE_MENU
	    APS_DISABLE_AUXPLANE
	    help	"image:quantize"
	}
	parm {
	    SOHO_STRING("aps_sfilter_plane#", "Sample Filter",
			    EXTRA_IMAGE_LABEL, "alpha")
	    menu	{
		"alpha"		"Opacity Filtering"
		"fullopacity"	"Full Opacity Filtering"
		"closest"	"Closest Surface"
	    }
	    APS_DISABLE_AUXPLANE
	    help	"image:sfilter"
	}
	parm {
	    SOHO_STRING("aps_pfilter_plane#", "Pixel Filter",
			    EXTRA_IMAGE_LABEL, "")
	    APS_AUX_PIXEL_FILTER_MENU
	    APS_DISABLE_AUXPLANE
	    help	"image:pfilter"
	}
	parm {
	    SOHO_FLOAT("aps_gamma_plane#", "Gamma", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0.001 3 }
	    APS_DISABLE_AUXPLANE
	    hidewhen "{ \"aps_showextraplaneparms\" == 0 }"
	    help	"image:gamma"
	}
	parm {
	    SOHO_FLOAT("aps_gain_plane#", "Gain", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0.001 10 }
	    APS_DISABLE_AUXPLANE
	    hidewhen "{ \"aps_showextraplaneparms\" == 0 }"
	    help	"image:gain"
	}
	parm {
	    SOHO_FLOAT("aps_dither_plane#", "Dither", EXTRA_IMAGE_LABEL, 0.5)
	    range	{ 0 1 }
	    APS_DISABLE_AUXPLANE
	    hidewhen "{ \"aps_showextraplaneparms\" == 0 }"
	    help	"image:dither"
	}
	parm {
	    SOHO_FLOAT("aps_whitepoint_plane#", "White Point", EXTRA_IMAGE_LABEL, 1)
	    range	{ 0 1 }
	    APS_DISABLE_AUXPLANE
	    hidewhen "{ \"aps_showextraplaneparms\" == 0 }"
	    help	"image:whitepoint"
	}
	parm {
	    SOHO_TOGGLE("aps_componentexport#", "Export variable for each component", EXTRA_IMAGE_LABEL, 0)
	    APS_DISABLE_AUXPLANE_NONLPE
	}
	parm {
	    SOHO_INT("aps_lightexport#", "Light Exports",
			    "", 0)
	    menu {
		"0"	"No light exports"
		"1"	"Export variable for each light"
		"2"	"Merge all lights into single channel"
	    }
	    APS_DISABLE_AUXPLANE_NONLPE
	}
	parm {
	    name	"aps_lightexport_scope#"
	    label	"Light Mask"
	    type	oplist
	    default	{ "*" }
	    parmtag	{ opfilter "!!OBJ/LIGHT!!" }
	    parmtag	{ opexpand "1" }
	    APS_DISABLE_AUXPLANE
	    hidewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" == \"\" } { \"aps_lightexport#\" == 0 }"
	}
	parm {
	    name	"aps_lightexport_select#"
	    label	"Light Selection"
	    type	string
	    default	{ "*" }
	    hidewhen "{ \"aps_disable_plane#\" == 1 } { \"aps_variable_plane#\" == \"\" } { \"aps_lightexport#\" == 0 }"
	}
    }

    // Image format options
    collection {
	name	common_format_options
	label	"Common Meta Data"
	parmtag	{ spare_category	META_DATA_LABEL }
	parm	{
	    SOHO_STRING(aps_image_artist, "Artist", META_DATA_LABEL, "")
	    APPLESEED_PROP("imageoption", "artist")
	}
	parm	{
	    SOHO_STRING(aps_image_comment, "Comment", META_DATA_LABEL, "")
	    APPLESEED_PROP("imageoption", "comment")
	}
	parm	{
	    SOHO_STRING(aps_image_hostname, "Hostname", META_DATA_LABEL, "")
	    APPLESEED_PROP("imageoption", "hostname")
	}
    }

    collection {
	name	exr_data_window_options
	label	"EXR Data Window Options"
	parmtag	{ spare_category	META_DATA_LABEL }
	parm	{
	    SOHO_TOGGLE(aps_setexrdatawindow, "Set EXR Data Window", META_DATA_LABEL, 1)
	    APPLESEED_PROP("image", "setexrdatawindow")
	}
	parm	{
	    SOHO_INT(aps_exrdatawindowpadding, "EXR Data Window Padding", META_DATA_LABEL, 0)
	    hidewhen "{ aps_setexrdatawindow == 0 }"
	    APPLESEED_PROP("image", "exrdatawindowpadding")
	}
	parm	{
	    SOHO_FLOAT(aps_exrdatawindowthreshold, "EXR Data Window Threshold", META_DATA_LABEL, 0.0)
	    hidewhen "{ aps_setexrdatawindow == 0 }"
	    APPLESEED_PROP("image", "exrdatawindowthreshold")
	}
	parm	{
	    SOHO_STRING(aps_exrdatawindowplanes, "EXR Data Window Planes", META_DATA_LABEL, "*")
	    hidewhen "{ aps_setexrdatawindow == 0 }"
	    APPLESEED_PROP("image", "exrdatawindowplanes")
	}
    }

    parm	{
	SOHO_STRING(aps_image_tiff_compression, "TIFF Compression",
			    META_DATA_LABEL, "LZW")
	menu {
	    "None"			"No compression"
	    "LZW"			"LZW Compression"
	    "AdobeDeflate"		"Adobe Deflate"
	    "PackBits"		"PackBits"
	    "JPEG"			"JPEG"
	    "PixarLog"		"Pixar Log"
	    "SGILog"		"LogLuv"
	    "SGILog24"		"LogLuv (24 bit)"
	}
	APPLESEED_PROP("imageoption", "TIFF.compression")
    }
    parm	{
	SOHO_STRING(aps_image_tiff_predictor, "TIFF Predictor",
			    META_DATA_LABEL, "auto")
	menu {
	    "auto"		"Auto-detect based on format"
	    "none"		"No prediction"
	    "horizontal"	"Horizontal differencing"
	}
	APPLESEED_PROP("imageoption", "TIFF.predictor")
    }
    parm	{
	SOHO_STRING(aps_image_rat_compression, "RAT Compression",
			    META_DATA_LABEL, "deflate")
	menu {
	    "none"		"No compression"
	    "deflate"	"GZip Deflate Compression"
	}
	APPLESEED_PROP("imageoption", "RAT.compression")
    }
    parm	{
	SOHO_TOGGLE(aps_image_rat_makemips, "RAT Generate MIP Maps",
			    META_DATA_LABEL, 1)
	APPLESEED_PROP("imageoption", "RAT.makemips")
    }

    parm	{
	SOHO_INT(aps_image_jpeg_quality, "JPEG Quality",
		    META_DATA_LABEL, 100)
	range	{ 20 100 }
	APPLESEED_PROP("imageoption", "JPEG.quality")
    }

    parm {
	SOHO_STRING(aps_image_cineon_space, "Cineon Color Space",
			    META_DATA_LABEL, "lin")
	menu {
	    "lin"	"Linear"
	    "log"	"Logarithmic (unconverted)"
	}
	APPLESEED_PROP("imageoption", "Cineon.cinspace")
    }
    parm {
	SOHO_FILE(aps_image_cineon_lut, "Cineon LUT",
			    META_DATA_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
	APPLESEED_PROP("imageoption", "Cineon.cinlut")
    }
    parm {
	SOHO_INT(aps_image_cineon_whitepoint, "Cineon White Point",
			    META_DATA_LABEL, 685)
	range	{ 0 1023 }
	APPLESEED_PROP("imageoption", "Cineon.cinwhite")
    }
    parm {
	SOHO_FLOAT(aps_image_cineon_gamma, "Cineon Gamma",
			    META_DATA_LABEL, 0.6)
	range	{ 0.001 4 }
	APPLESEED_PROP("imageoption", "Cineon.cingamma")
    }

    // OVERSCAN
    parm {
	name	aps_overscan
	label	"Image Overscan"
	parmtag	{ spare_category "View" }
	type	int
	size	2
	default	{ 0 0 }
	range	{ 0 100 }
    }


    parm {
	SOHO_TOGGLE(aps_image_exr_postprocess, "Enable EXR Post Processing",
			    META_DATA_LABEL, 1)
	APPLESEED_PROP("imageoption", "OpenEXR.enablepostprocess")
    }
    parm	{
	SOHO_STRING(aps_image_exr_compression, "EXR Compression",
			    META_DATA_LABEL, "zips")
	menu {
	    "none"		"No compression"
	    "dwab"		"DWA-B, Lossy and Fast (256-scanline block)"
	    "dwaa"		"DWA-A, Lossy and Fast (32-scanline block)",
	    "piz"		"PIZ Wavelet"
	    "rle"		"Runlength Encoding"
	    "zips"		"ZIP (Single scanline)"
	    "zip"		"ZIP (Multi-scanline blocks)"
	    "piz"		"PXR24 (32 bit float compression, lossy)"
	    "b44"		"B44 (4x4 block compression, lossy)"
	    "b44a"		"B44A (4x4 block extra compression, lossy)"
	}
	APPLESEED_PROP("imageoption", "OpenEXR.compression")
    }
    parm {
	SOHO_FLOAT(aps_image_exr_dwa_level, "DWA Compression Level",
			    META_DATA_LABEL, 85)
	range		 { 1 200 }
    	hidewhen	"{ aps_image_exr_compression != dwab aps_image_exr_compression != dwaa }"
	APPLESEED_PROP("imageoption", "OpenEXR.dwa_compression")
    }
    parm	{
	SOHO_STRING(aps_image_exr_storage, "EXR Storage",
			    META_DATA_LABEL, "scan")
	menu {
	    "scan"		"Scanline Storage"
	    "tile"		"Tile Storage"
	}
	APPLESEED_PROP("imageoption", "OpenEXR.storage")
    }
    parm	{
	SOHO_STRING(aps_image_exr_attributes, "EXR Attributes",
			    META_DATA_LABEL, "{}")
	APPLESEED_PROP("imageoption", "OpenEXR.attributes")
    }
    parm	{
	SOHO_STRING(aps_image_png_frompremult, "PNG Premultiplied",
		    META_DATA_LABEL, "premult")
	menu	{
	    "premult"	"Premultiplied"
	    "unpremult"	"Un-premultiplied"
	}
	APPLESEED_PROP("imageoption", "PNG.frompremult")
    }
    parm {
	SOHO_STRING(aps_image_mplay_rendermode, "MPlay Render Mode",
		META_DATA_LABEL, "current")
	menu {
	    "current"	"Render to current sequence"
	    "new"		"Start new sequence"
	}
	APPLESEED_PROP("imageoption", "IPlay.rendermode")
    }
    parm {
	SOHO_STRING(aps_image_mplay_framemode, "MPlay Frame Mode",
		META_DATA_LABEL, "append")
	menu {
	    "append"	"Append Frames To Sequence"
	    "match"	"Match Houdini Frame Numbers (overwrite frame)"
	}
	APPLESEED_PROP("imageoption", "IPlay.framemode")
    }

    parm {
	name	aps_image_mplay_label
	label	"MPlay Session Label"
	parmtag { spare_category META_DATA_LABEL }
	size	1
	type	string
	//default { "`pythonexprs(\"__import__('os').getpid()\")`" }
	default { "" }
	menureplace {
	    "`pythonexprs(\"__import__('os').getpid()\")`" "One per Houdini Process"
	    "$HIPNAME"	"One per Houdini File Name (.hip)"
	    "$OS"	"One per Output Driver Name (ROP)"
	    ""		"One MPlay session only"
	}
	APPLESEED_PROP("imageoption", "IPlay.label")
    }
    parm {
	name	aps_image_mplay_bgimage
	label	"MPlay Background Image"
	parmtag { spare_category META_DATA_LABEL }
	size	1
	type	string
	default { "" }
	APPLESEED_PROP("imageoption", "IPlay.bgimage")
    }


    // IPR SOCKET!!!!! should I use vm_?
    collection
    {
        name    aps_remote_mplay_display
        label   "Remote MPlay Display"
        parmtag { spare_category        META_DATA_LABEL }
        parm
        {
            SOHO_STRING("aps_image_mplay_sockethost",
                        "MPlay Remote Host", META_DATA_LABEL, "")
            help "(Advanced) The name of the remote host where mplay is running"
	    APPLESEED_PROP("imageoption", "IPlay.sockethost")
        }
        parm
        {
            SOHO_INT("aps_image_mplay_socketport",
                        "MPlay Remote Port", META_DATA_LABEL, "")
            help "(Advanced) The socket port number associated with mplay on the remote host (see mplay -K)"
	    APPLESEED_PROP("imageoption", "IPlay.socketport")
        }
    }
    parm {
	SOHO_STRING(aps_image_mplay_direction, "MPlay Tile Order",
		META_DATA_LABEL, "middle")
	menu {
	    "middle"	"Interactive (starting in middle)"
	    "top"		"Top down"
	    "bottom"	"Bottom up"
	    "hilbert"	"Hilbert Curve"
	}
	APPLESEED_PROP("imageoption", "IPlay.direction")
    }
    parm {
	SOHO_FLOAT(aps_image_mplay_gamma, "MPlay Gamma",
		META_DATA_LABEL, 2.2)
	range	{ 0.001	4 }
	APPLESEED_PROP("imageoption", "IPlay.gamma")
    }
    parm {
	SOHO_FILE(aps_image_mplay_lut, "MPlay Display LUT",
		META_DATA_LABEL, "")
	parmtag	{ filechooser_mode	"read" }
	APPLESEED_PROP("imageoption", "IPlay.lut")
    }



    //
    // CAMERA overwrites
    collection {
	name	override_resolution
	label	"Override Res"
	parmtag	{ spare_category	OUTPUT_LABEL }
	parm	{
	    name	override_camerares
	    label	"Override Camera Resolution"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	toggle
	    default	{ 0 }
	}
	parm {
	    name	res_fraction
	    label	"Resolution Scale"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	string
	    default	{ "0.5" }
	    menu	{
		"0.1"		"1/10 (One Tenth Resolution)"
		"0.2"		"1/5 (One Fifth Resolution)"
		"0.25"		"1/4 (Quarter Resolution)"
		"0.3333333"	"1/3 (One Third Resolution)"
		"0.5"		"1/2 (Half Resolution)"
		"0.6666666"	"2/3 (Two Thirds Resolution)"
		"0.75"		"3/4 (Three Quarter Resolution)"
		"specific"	"User Specified Resolution"
	    }
	    hidewhen	"{ override_camerares == 0 }"
	}
	parm {
	    name	res_override
	    label	Resolution
	    parmtag	{ spare_category	OUTPUT_LABEL }

	    type	intvector2
	    default	{ 1280 720 }
	    disablewhen	"{ res_fraction != \"specific\" }"
	    hidewhen	"{ override_camerares == 0 }"
	    joinnext
	}
	parm {
	    name	res_overrideMenu
	    label	"Choose Resolution"
	    parmtag	{ spare_category	OUTPUT_LABEL }
	    type	button
	    nolabel
	    callback	"opparm . res_override ( `arg(\"$script_value\", 0)` `arg(\"$script_value\", 1)` aspect_override ( `arg(\"$script_value\", 2)` )"
	    disablewhen	"{ res_fraction != \"specific\" }"
	    hidewhen	"{ override_camerares == 0 }"
	    menumini	{
		RESOLUTION_MENU
	    }
	}
	parm {
	    name	aspect_override
	    label	"Pixel Aspect Ratio"
	    parmtag	{ spare_category OUTPUT_LABEL }
	    type	float
	    size	1
	    default	{ 1 }
	    range	{ 0.05 2 }
	    hidewhen	"{ override_camerares == 0 }"
	    disablewhen	"{ res_fraction != \"specific\" }"
	}
    }
    



    // TODO: CHECKPOINT 
    parm {
	SOHO_TOGGLE(aps_writecheckpoint, "Output Checkpoint Files", OUTPUT_LABEL, 1)
	APPLESEED_PROP("image", "writecheckpoint")
    }
    parm {
	SOHO_TOGGLE(aps_readcheckpoint, "Resume from Checkpoint Files", OUTPUT_LABEL, 0)
	APPLESEED_PROP("image", "readcheckpoint")
    }
    collection
    {
	name aps_checkpoint_naming
	parmtag { spare_category OUTPUT_LABEL }
	parm {
	    SOHO_TOGGLE(aps_overridecheckpointname, "Override Checkpoint File Name", OUTPUT_LABEL, 0)
	    APPLESEED_PROP("image", "overridecheckpointname")
	}
	parm {
	    name        aps_checkpointname
	    label       "Checkpoint File Name"
	    parmtag     { spare_category OUTPUT_LABEL }
	    size        1
	    type        string
	    default     { "`chs(\"aps_picture\")`.mantra_checkpoint" }
	    hidewhen    "{ aps_overridecheckpointname == 0 }"
	    APPLESEED_PROP("image", "checkpointname")
	}
    }
    parm {
	SOHO_INT(aps_checkpointcachesize, "Checkpoint Cache Size (MB)", OUTPUT_LABEL, 1)
	range { 1 100000 }
	logarithmic
	APPLESEED_PROP("image", "checkpointcachesize")
    }
    parm {
	SOHO_FLOAT(aps_checkpointperiod, "Checkpoint Period (s)", OUTPUT_LABEL, 30)
	APPLESEED_PROP("image", "checkpointperiod")
    }

    





    // MOTION BLUR
    parm {
	SOHO_TOGGLE(allowmotionblur, "Allow Motion Blur", RENDERING_MAIN_LABEL, 0)
    }
    parm {
	SOHO_FLOAT(shutter, "Shutter Time", "Sampling", 0.5)
	range	{ 0 1 }
	disablewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_FLOAT(shutteroffset, "Shutter Offset", RENDERING_MAIN_LABEL, 1.0)
	range	{ -1 1 }
	hidewhen	"{ allowmotionblur == 0 }"
    }

    parm {
	name	motionstyle
	label	"Motion Blur Style"
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
	type	string
	default	{ "trailing" }
	menu	{
	    "leading"	"Leading Blur"
	    "centered"	"Frame Centered Blur"
	    "trailing"	"Trailing Blur"
	}
	disablewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_INT(xform_motionsamples, "Xform Time Samples", RENDERING_MAIN_LABEL, 2)
	range	{ 1 10 }
	hidewhen	"{ allowmotionblur == 0 }"
    }
    parm {
	SOHO_INT(geo_motionsamples, "Geo Time Samples", RENDERING_MAIN_LABEL, 1)
	range	{ 1 10 }
	hidewhen	"{ allowmotionblur == 0 }"
    }

    collection {
	name	velocityblur
	parmtag	{ spare_category RENDERING_SAMPLING_LABEL }
	parm {
	    name	geo_velocityblur
	    label	"Geometry Velocity Blur"
	    type	ordinal
	    default	{ "off" }
	    menu {
		"off"		"No Velocity Blur"
		"on"		"Velocity Blur"
		"accelblur"	"Acceleration Blur"
	    }
	    disablewhen	"{ allowmotionblur == 0 }"
	}
	parm {
	    SOHO_STRING(geo_accelattribute, "Acceleration Attribute",
			RENDERING_SAMPLING_LABEL, "accel")
	    hidewhen	"{ geo_velocityblur != "accelblur" }"
	}
    }
    parm {
    	name	aps_shuttershape
    	label	"Shutter Shape"
    	parmtag { spare_category RENDERING_SAMPLING_LABEL }
    	type	ramp_flt
    	default	{ "2" }
    	parmtag { rampfloatdefault "1pos 0 1value 1 1interp catmull-rom 2pos 1 2value 1 2interp catmull-rom" }
	disablewhen	"{ allowmotionblur == 0 } { aps_renderengine == micropoly } { aps_renderengine == pbrmicropoly }"
	APPLESEED_PROP("camera", "shuttershape")
    }

    parm {
	SOHO_FLOAT(aps_dofaspect, "DOF Aspect", RENDERING_SAMPLING_LABEL, 1.0)
	range	{ 0.01 100 }
	APPLESEED_PROP("camera", "dofaspect")
    }




    ///
    /// PIXEL SAMPLING
    ///
    collection 
    {
		name	aps_samplingsettings
		parmtag	{ spare_category RENDERING_SAMPLING_LABEL }

	    parm {
		SOHO_INT(aps_passes, "Render Passes", RENDERING_SAMPLING_LABEL, 1)
		range	{ 1 64 }
		APPLESEED_PROP("renderer", "passes")
	    }

	    parm {
		SOHO_TOGGLE(aps_adaptivesampling, "Adaptive Sampling", RENDERING_SAMPLING_LABEL, 1)
		APPLESEED_PROP("renderer", "adaptive_pixel_renderer")
	    }

	    parm {
		SOHO_INT(aps_minsamples, "Min Samples", RENDERING_SAMPLING_LABEL, 16)
		range	{ 1 64 }
		APPLESEED_PROP("renderer", "min_samples")
	    }

	    parm {
		SOHO_TOGGLE(aps_uniformforceantialiasing, "Force Antialiasing", RENDERING_SAMPLING_LABEL, 1)
		APPLESEED_PROP("renderer", "force_antialiasing")
		hidewhen "{ aps_adaptivesampling == 1 }"
	    }

	    parm {
		SOHO_TOGGLE(aps_uniformdecorrelatepixels, "Decorrelate Pixels", RENDERING_SAMPLING_LABEL, 1)
		APPLESEED_PROP("renderer", "decorrelate_pixels")
		hidewhen "{ aps_adaptivesampling == 1 }"
	    }

	    parm {
		SOHO_INT(aps_maxsamples, "Max Samples", RENDERING_SAMPLING_LABEL, 256)
		range	{ 1 512 }
		hidewhen "{ aps_adaptivesampling == 0 }"
		APPLESEED_PROP("renderer", "max_samples")
	    }


	    parm {
		SOHO_INT(aps_batchsize, "Batch Size", RENDERING_SAMPLING_LABEL, 16)
		range	{ 1 64 }
		hidewhen "{ aps_adaptivesampling == 0 }"
		APPLESEED_PROP("renderer", "batch_size")
	    }
	  
	    parm {
		SOHO_FLOAT(aps_variance, "Noise Threshold", RENDERING_SAMPLING_LABEL, 0.1)
		range	{ 0 1 }
		logarithmic
		hidewhen "{ aps_adaptivesampling == 0 }"
		APPLESEED_PROP("renderer", "noise_threshold")
	    }

	    parm {
		SOHO_TOGGLE(aps_samplelock, "Lock Sampling Pattern", RENDERING_SAMPLING_LABEL, 0)
		APPLESEED_PROP("renderer", "samplelock")
	    }
	    
	    parm {
		SOHO_INT(aps_randomseed, "Sampling Pattern Seed", RENDERING_SAMPLING_LABEL, 0)
		APPLESEED_PROP("renderer", "randomseed")
		disablewhen "{ aps_samplelock == 1 }"

	    }
	}

   

   	//
    // RENDERING / LIGHT ENGINE 
    //
    parm {
	SOHO_STRING(aps_lightingengine, "Lighting Engine", RENDERING_MAIN_LABEL, "pt")
	menu {
	    "pt"		"Path Tracing"
	    "sppm"		"Stochastic Progressive Photon Mapping"
	}
	APPLESEED_PROP("renderer", "lighting_engine")
	APPLESEED_FORCE_OUTPUT
    }
    parm {
	SOHO_TOGGLE(aps_spectrummode, "Enable Spectral Rendering", RENDERING_MAIN_LABEL, 0)
	APPLESEED_PROP("renderer", "spectrum_mode")
	APPLESEED_FORCE_OUTPUT
    }







    //
    // System settings
    // 

    collection 
    {
		name	aps_systemsettings
		parmtag	{ spare_category RENDERING_RENDER_LABEL }

		parm {
		SOHO_INT("aps_tilesize", "Tile Size", RENDERING_SAMPLING_LABEL, 32)
		range	{ 1 128 }
		APPLESEED_PROP("renderer", "tile_size")
	    }

		parm {
		    SOHO_INT(aps_threads, "Thread Count", RENDERING_RENDER_LABEL, 0)
		    range	{ 0 128 }
		    APPLESEED_PROP("renderer", "rendering_threads")
		}

		parm {
		    SOHO_INT(aps_texturecachesize, "Texture Cache Size (MB)", RENDERING_RENDER_LABEL, 1024)
		    range	{ 100 100000 }
		    logarithmic
		    APPLESEED_PROP("texture_store", "max_size")
		}
		
    }
   


    
  
    parm {
	SOHO_TOGGLE(aps_blurquality, "Enable Motion Blur", RENDERING_RENDER_LABEL, 1)
	APPLESEED_PROP("renderer", "blurquality")
    }
   
    parm {
	SOHO_TOGGLE(aps_dofquality, "Enable Depth of Field", RENDERING_RENDER_LABEL, 1)
	APPLESEED_PROP("renderer", "dofquality")
    }
   
   
    parm {
	SOHO_TOGGLE(vm_preview, "Enable Preview", "Preview", 0)
	APPLESEED_PROP("renderer", "preview")
    }
    
    parm {
	SOHO_FLOAT(aps_previewtime, "Preview Time", "Preview", 1)
	APPLESEED_PROP("renderer", "previewtime")
    }



    //
    // Camera properties
    //
    parm {
	name	aps_cameralist
	label	"Render Cameras"
	type	oplist
	parmtag	{ opfilter	"!!OBJ/CAMERA!!" }
	parmtag	{ oprelative	"/obj" }
	parmtag	{ spare_category "Stereo" }
	default	{ "" }
    }

    parm {
	SOHO_STRING(aps_bokeh, "Bokeh", "Sampling", "radial")
	menureplace {
	    "radial"		"Radial Bokeh"
	    "null"			"Disable Bokeh"
	}
    }
    
    parm {
	SOHO_FLOAT(aps_bokehrotation,	"Bokeh Rotation", "Sampling", 0)
	range { 0 360 }
	disablewhen	"{ aps_bokeh != file }"
	APPLESEED_PROP("bokeh", "-r")
    }

 
    parm {
	SOHO_INT(aps_verbose, "Verbose Level", RENDERING_STATISTICS_LABEL, 0)
	range { 0 5 }
	APPLESEED_PROP("renderer", "verbose")
	APPLESEED_FORCE_OUTPUT
    }

    parm {
	SOHO_TOGGLE(viewmenu, "Include in Viewport Menu", "Stereo", 1)
    }
   

    //
    // Object Properties
    parm {
	name	shop_propertiespath
	label	"Rendering Properties"
	parmtag	{ spare_category "Shaders" }
	type	oppath
	parmtag	{ opfilter	"!!SHOP/PROPERTIES!!" }
	default	{ "" }
    }

    collection 
    {
		name	aps_objectsettings
		parmtag	{ spare_category RENDERING_SHADING_LABEL }
	    parm {
		SOHO_TOGGLE(aps_visibility_camera, "Camera",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "camera")
	    } 

	    parm {
		SOHO_TOGGLE(aps_visibility_light, "Light",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "light")
	    }

	    parm {
		SOHO_TOGGLE(aps_visibility_shadow, "Shadow",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "shadow")
	    }
	    parm {
		SOHO_TOGGLE(aps_visibility_diffuse, "Diffuse",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "diffuse")
	    }
	    parm {
		SOHO_TOGGLE(aps_visibility_specular, "Specular",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "specular")
	    }
	    parm {
		SOHO_TOGGLE(aps_visibility_glossy, "Glossy",  RENDERING_SHADING_LABEL, 1)
		APPLESEED_PROP("visibility", "glossy")
	    }

	    parm {
		SOHO_INT(aps_mediumpriority, "Medium Priority", RENDERING_SHADING_LABEL, 0)
		range { -128 127 }
		APPLESEED_PROP("object", "medium_priority")
		APPLESEED_FORCE_OUTPUT
	    }

	    parm {
	        SOHO_STRING(aps_raybiasmethod, "Ray Bias Method", RENDERING_SHADING_LABEL, "none")
	        menu {
	            "none"	                "None"
	            "incoming_direction"	"Shift Along Incoming Direction"
	            "outgoing_direction"	"Shift Along Outgoing Direction"
	            "normal"	            "Shift Along Surface Normal"
	        }
	        APPLESEED_PROP("object", "ray_bias_method")
	    }

	    parm {
		SOHO_FLOAT(aps_raybiasdistance, "Ray Bias Distance", "Shading", 0.0)
		range	{ 0.0001 1 }
		APPLESEED_PROP("object", "ray_bias_distance")
	    }

	    parm {
	        SOHO_STRING(aps_alphamap, "Alpha Map", RENDERING_SHADING_LABEL, "")
	        APPLESEED_PROP("object", "alpha_map")
	    }

	    parm {
	        SOHO_STRING(aps_ssssetindentifier, "SSS Set Identifier", RENDERING_SHADING_LABEL, "")
	        APPLESEED_PROP("object", "sss_set_identifier")
	    }
	}







	///
	/// Unidirectional Path tracing 
	///
	 collection 
    {
		name	aps_path_tracing
		parmtag	{ spare_category RENDERING_PR_LABEL }
		parm {
		SOHO_TOGGLE(aps_directlighing, "Direct Lighing",  RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "enable_dl")
	    }
	    parm {
		SOHO_TOGGLE(aps_imagebasedlighting, "Image Based Lighting",  RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "enable_ibl")
	    }
	    parm {
		SOHO_TOGGLE(aps_caustics, "Caustics",  RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "enable_caustics")
	    }
	    parm {
		SOHO_INT(aps_maxbounces, "Max Bounces", RENDERING_PR_LABEL, 10)
		APPLESEED_PROP("pr", "max_bounces")
	    }
	    parm {
		SOHO_INT(aps_maxdiffusebounces, "Max Diffuse Bounces", RENDERING_PR_LABEL, 10)
		APPLESEED_PROP("pr", "max_diffuse_bounces")
	    }
	    parm {
		SOHO_INT(aps_maxglossybounces, "Max Glossy Bounces", RENDERING_PR_LABEL, 10)
		APPLESEED_PROP("pr", "max_glossy_bounces")
	    }
	    parm {
		SOHO_INT(aps_maxspecularbounces, "Max Specular Bounces", RENDERING_PR_LABEL, 10)
		APPLESEED_PROP("pr", "max_specular_bounces")
	    }
	    parm {
		SOHO_INT(aps_maxvolumebounces, "Max Volume Bounces", RENDERING_PR_LABEL, 10)
		APPLESEED_PROP("pr", "max_volume_bounces")
	    }
	    parm {
		SOHO_INT(aps_directlighitngsamples, "Direct Lighting Samples", RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "dl_light_samples")
	    }
	    parm {
		SOHO_INT(aps_iblsamples, "IBL Samples", RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "ibl_env_samples")
	    }
	    parm {
		SOHO_INT(aps_rrminpathlength, "Russian Roulette Start Bounce", RENDERING_PR_LABEL, 6)
		APPLESEED_PROP("pr", "rr_min_path_length")
	    }
	    parm {
		SOHO_TOGGLE(aps_nexteventestimation, "Next Event Estimation",  RENDERING_PR_LABEL, 1)
		APPLESEED_PROP("pr", "next_event_estimation")
	    }
	    parm {
        SOHO_INT(aps_lightsampler, "Light Sampler", RENDERING_PR_LABEL, 0)
        menu {
            "cdf" "CDF"
            "lighttree" "Light Tree"
        	}
		APPLESEED_PROP("pr", "light_sampler")
    	}
	}


	///
	/// Stochastic Progressive Photon Mapping
	///
	 collection 
    {
		name	aps_sppm
		parmtag	{ spare_category RENDERING_SPPM_LABEL }
		parm {
        SOHO_STRING(aps_photontype, "Photon Type", RENDERING_SPPM_LABEL, "mono")
        menu {
            "mono" "Monochromatic"
            "poly" "Polychromatic"
        	}
		APPLESEED_PROP("sppm", "photon_type")
    	}
    	parm {
        SOHO_STRING(aps_sppmdirectlighing, "Direct Lighting", RENDERING_SPPM_LABEL, "rt")
        menu {
            "rt"   "Ray Tracing"
            "sppm" "Photons"
            "off"  "No Direct Lighing"
        	}
		APPLESEED_PROP("sppm", "dl_mode")
    	}
	    parm {
		SOHO_TOGGLE(aps_sppmimagebasedlighting, "Image Based Lighting",  RENDERING_SPPM_LABEL, 1)
		APPLESEED_PROP("sppm", "enable_ibl")
	    }
	    parm {
		SOHO_TOGGLE(aps_sppmcaustics, "Caustics",  RENDERING_SPPM_LABEL, 1)
		APPLESEED_PROP("sppm", "enable_caustics")
	    }
	    parm {
		SOHO_INT(aps_maxphotonbounces, "Max Photon Bounces", RENDERING_SPPM_LABEL, 8)
		APPLESEED_PROP("sppm", "photon_tracing_max_bounces")
	    }
	    parm {
		SOHO_INT(aps_maxpathbounces, "Max Path Bounces", RENDERING_SPPM_LABEL, 8)
		APPLESEED_PROP("sppm", "path_tracing_max_bounces")
	    }
	    parm {
		SOHO_INT(aps_lightphotons, "Light Photons", RENDERING_SPPM_LABEL, 1000000)
		APPLESEED_PROP("sppm", "light_photons_per_pass")
	    }
	    parm {
		SOHO_INT(aps_environmentphotons, "Environment Photons", RENDERING_SPPM_LABEL, 1000000)
		APPLESEED_PROP("sppm", "env_photons_per_pass")
	    }
	    parm {
		SOHO_FLOAT(aps_sppminitialradius, "Initial Radius", RENDERING_SPPM_LABEL, 1)
		APPLESEED_PROP("sppm", "initial_radius")
	    }
	    parm {
		SOHO_INT(aps_maxphotonsperestimate, "Max photons per estimate", RENDERING_SPPM_LABEL, 100)
		APPLESEED_PROP("sppm", "max_photons_per_estimate")
	    }
	    parm {
		SOHO_FLOAT(aps_sppmalpha, "Alpha", RENDERING_SPPM_LABEL, 0.7)
		APPLESEED_PROP("sppm", "alpha")
	    }
	}





    DEF_COMMON_OBJECT_CATEGORIES()
    COMMON_OBJECT_LIGHTMASK( "Shading" )
    COMMON_OBJECT_REFLECTMASK( "Shading" )
    COMMON_OBJECT_REFRACTMASK( "Shading" )
    COMMON_OBJECT_SHADOWMASK( "Shadow" )

    parm {
	SOHO_FLOAT(aps_motionfactor, "Motion Factor", RENDERING_DICING_LABEL, 0)
	range	{ 0 1 }
	disablewhen	"{ allowmotionblur == 0 aps_dof == 0 }"
	APPLESEED_PROP("object", "motionfactor")
    }
    
	
   
    /// Don't know now to pass it to GEOtranslator
    parm {
        SOHO_INT(aps_addnormalsto, "Add Normals to Geometry", RENDERING_GEOMETRY_LABEL, 1)
        menu {
            "0" "None"
            "1" "Vertex Normals"
            "2" "Point Normals"
        }
    }
   

   	///
   	/// Storage for geoemtry
   	/// 
    parm {
	SOHO_FILE(aps_tmpsharedstorage, "Shared temp storage", RENDERING_DRIVER_LABEL, "$HIP/ifds/storage")
	parmtag	{ filechooser_mode	"write" }
    }
    parm {
	SOHO_FILE(aps_tmplocalstorage, "Local temp storage", RENDERING_DRIVER_LABEL, "$HOUDINI_TEMP_DIR/ifds/storage")
	parmtag	{ filechooser_mode	"write" }
    }
    

   

  	// Headlight creation  
    parm {
	SOHO_TOGGLE(soho_forceheadlight, "Force Headlight Creation", "Objects", 0)
    }


    ///
    /// Instalment
    /// 
    parm {
	// Parameters for the "Rendering/Sampling" tab
	name	default_rendering_sampling
	label	"Default Rendering/Sampling"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
		aps_samplingsettings
	    )"
		}
	}

	parm {
	// Parameters for the "Rendering" tab
	name	default_rendering
	label	"Default Rendering"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    aps_lightingengine
	   	aps_dof
	    allowmotionblur
	    xform_motionsamples
	    geo_motionsamples
	    shutteroffset
	    )"
	}
    }

     parm {
	// Parameters for the "Rendering/Render" tab
	name	default_rendering_render
	label	"Default Rendering/Render"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
		aps_systemsettings
	    aps_spectrummode

	    
	    )"
	}
    }


    parm {
	// Parameters for the "Limits" tab
	name	default_rendering_pr
	label	"Default Path Tracing"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	   aps_path_tracing
	    )"
	}
    }

    parm {
	// Parameters for the "Limits" tab
	name	default_rendering_sppm
	label	"Default SPPM"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	   aps_sppm
	    )"
	}
    }


    // Default parameter lists for objects.

#if !defined(USER_DEFINED_IFD_CAMERA_PARMS)
    parm {
	name	default_camera
	label	"Default Camera"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	"iconscale resolution aspect projection aps_lensshader focal_length aperture orthowidth near far background_parms shutter viewport_window viewport_crop focus fstop aps_bokeh aps_bokehfile aps_bokehrotation" }
    }

//     parm {
// 	name	default_stereocamera
// 	label	"Default Stereo Camera"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	"iconscale resolution aspect projection aps_lensshader focal_length aperture orthowidth near far shutter viewport_window viewport_crop focus fstop aps_bokeh aps_bokehfile aps_bokehrotation aps_cameralist" }
//     }

// #endif

// #if !defined(USER_DEFINED_IFD_LIGHT_PARMS)
//     parm {
// 	name	default_light
// 	label	"Default Light"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	"categories shop_lightpath shop_shadowpath shadowmask" }
//     }
// #endif

// #if !defined(USER_DEFINED_IFD_AMBIENT_PARMS)
//     parm {
// 	name	default_ambient
// 	label	"Default Ambient"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	"shop_lightpath light_color" }
//     }
// #endif

// #if !defined(USER_DEFINED_IFD_GEOMETRY_PARMS)
//     parm {
// 	name	default_geometry
// 	label	"Default Geometry"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    categories
// 	    reflectmask
// 	    refractmask
// 	    lightmask
// 	    lightcategories
// 	    aps_lpetag
// 	    aps_volumefilter
// 	    aps_volumefilterwidth
// 	    aps_matte
// 	    velocityblur
// 	    aps_shadingquality
// 	    aps_flatness
// 	    aps_raypredice
// 	    aps_curvesurface
// 	    aps_rayshade
// 	    aps_rmbackface
// 	    shop_geometrypath
// 	    aps_forcegeometry
// 	    aps_rendersubdcurves
// 	    aps_renderpoints
//             aps_renderpointsas
// 	    aps_usenforpoints
// 	    aps_pointscale
//             aps_pscalediameter
// 	    aps_metavolume
// 	    aps_coving
// 	    aps_materialoverride
// 	    aps_overridedetail
//             aps_procuseroottransform
// 	    )" }
//     }
// #endif

#if !defined(USER_DEFINED_IFD_OUTPUT_PARMS)
    parm {
	// Parameters for the "Images/Output" tab
	name	default_images_output
	label	"Default Images/Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    aps_pfilter
	    aps_sfilter
	    aps_quantize
	    aps_gamma
	    aps_subpixel
	    res_fraction
	    aps_tiled_rendering
	    aps_writecheckpoint
	    aps_readcheckpoint
	    render_viewcamera
	    render_any_shadowmap
	    render_any_envmap
	    render_any_photonmap
	    render_any_pointcloud
	    )"
	}
    }
    parm {
	// Parameters for the "Images/Output" tab
	name	unwrap_images_output
	label	"Unwrap Images/Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
            aps_pfilter
	    aps_sfilter
	    aps_quantize
	    aps_gamma
	    aps_subpixel
	    aps_tiled_rendering
	    render_viewcamera
	    render_any_shadowmap
	    render_any_envmap
	    render_any_photonmap
	    render_any_pointcloud
	    )"
	}
    }
    parm {
	name	default_images_deep_output
	label	"Default Deep Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    aps_deepresolver
	    aps_dcmfilename
	    aps_matchdeeppixelfilter
	    aps_dcmcompositing
	    aps_dcmdepthplanes
	    aps_dsmfilename
	    )"
	}
    }
    parm {
	name	default_images_crypto_output
	label	"Default Crypto Output"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    aps_cryptolayers
	    )"
	}
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	default_images_extra_pre
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
            )"
        }
    }
    parm {
	// Parameters for the "Images/Extra Image Planes" tab
	name	mantra_images_extra
	label	"Default Images/Extra Image Planes"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
            aps_exportcomponents
	    aps_quickplane_P
	    aps_quickplane_Pz
            aps_quickplane_N
	    aps_quickplane_all_comp
	    aps_quickplane_direct_comp
	    aps_quickplane_indirect_comp
	    aps_quickplane_all_emission
	    aps_quickplane_direct_noshadow
	    aps_quickplane_direct_samples
	    aps_quickplane_indirect_samples
	    aps_quickplane_sss
            aps_quickplane_basecolor
            aps_quickplane_diffcolor
            aps_quickplane_speccolor
            aps_quickplane_emitcolor
            aps_quickplane_ssscolor
            aps_quickplane_metallic
            aps_quickplane_specrough
	    )"
	}
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	unwrap_images_extra
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
	    aps_bake_normalizep
            aps_extractimageplanes
            aps_extractremoveintermediate
            aps_extractimageplanesformat
            aps_quickplane_Nt
            aps_quickplane_Ds
            aps_quickplane_Vd
            aps_quickplane_Vdt
            aps_quickplane_Oc
            aps_quickplane_Cv
            aps_quickplane_Th
            aps_quickplane_Cu
	    aps_quickplane_P
	    aps_quickplane_N
            aps_quickplane_basecolor
            aps_quickplane_diffcolor
            aps_quickplane_speccolor
            aps_quickplane_emitcolor
            aps_quickplane_ssscolor
            aps_quickplane_metallic
            aps_quickplane_specrough
            )"
        }
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	unwrap_images_channels
        label	"Image Planes Output"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
	    aps_extractseparator
	    aps_channel_names_seperator_bar
            aps_quickplane_Nt_channel
            aps_quickplane_Ds_channel
            aps_quickplane_Vd_channel
            aps_quickplane_Vdt_channel
            aps_quickplane_Oc_channel
            aps_quickplane_Cv_channel
            aps_quickplane_Th_channel
            aps_quickplane_Cu_channel
	    aps_quickplane_P_channel
	    aps_quickplane_N_channel
            aps_quickplane_basecolor_channel
            aps_quickplane_diffcolor_channel
            aps_quickplane_speccolor_channel
            aps_quickplane_emitcolor_channel
            aps_quickplane_ssscolor_channel
            aps_quickplane_metallic_channel
            aps_quickplane_specrough_channel
            )"
        }
    }
    parm {
        // Parameters for the "Images/Extra Image Planes" tab
        name	default_images_extra_post
        label	"Default Images/Extra Image Planes"
        parmtag	{ spare_category	"__spare_parmlist" }
        parmtag	{ spare_parmlist	R"(
            aps_showextraplaneparms
            aps_numaux
            )"
        }
    }
    parm {
	// Parameters for the "Images/Meta Data" tab
	name	default_images_meta
	label	"Default Images/Meta Data"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    common_format_options
	    aps_image_mplay_direction
	    aps_image_mplay_framemode
	    aps_image_mplay_label
	    aps_image_jpeg_quality
	    aps_image_tiff_compression
	    aps_image_exr_compression
	    aps_image_exr_dwa_level
	    )"
	}
    }
    parm {
	// Parameters for the "Images/Meta Data" tab
	name	unwrap_images_meta
	label	"Unwrap Images/Meta Data"
	parmtag	{ spare_category	"__spare_parmlist" }
	parmtag	{ spare_parmlist	R"(
	    common_format_options
	    aps_image_jpeg_quality
	    aps_image_tiff_compression
	    aps_image_exr_compression
	    aps_image_exr_dwa_level
	    )"
	}
    }
//     parm {
// 	// Parameters for the "Rendering" tab
// 	name	default_rendering
// 	label	"Default Rendering"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_renderengine
// 	    aps_dof
// 	    allowmotionblur
// 	    xform_motionsamples
// 	    geo_motionsamples
// 	    shutteroffset
// 	    aps_traceblur
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering" tab
// 	name	unwrap_rendering
// 	label	"Unwrap Rendering"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_renderengine
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Render" tab
// 	name	default_rendering_render
// 	label	"Default Rendering/Render"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_bucketsize
// 	    aps_threads
// 	    aps_cachelimit
// 	    aps_octreestyle
// 	    aps_kdmemfactor
// 	    aps_hidden
// 	    aps_otlfullpath
// 	    aps_embedvex
// 	    declare_stylesheets
// 	    apply_stylesheets
// 	    declare_all_shops
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Render" tab
// 	name	unwrap_rendering_render
// 	label	"Unwrap Rendering/Render"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_bucketsize
// 	    aps_threads
// 	    aps_cachelimit
// 	    aps_kdmemfactor
// 	    aps_otlfullpath
// 	    aps_embedvex
// 	    declare_all_shops
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Baking" tab
// 	name	default_rendering_baking
// 	label	"Default Rendering/Baking"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_bake_skipcf
// 	    aps_bake_layerexport
// 	    aps_bake_samples
// 	    aps_bake_tangentnormal_group
// 	    aps_bake_occlusionbias
// 	    aps_bake_cavity_group
// 	    aps_bake_curvature_group
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Sampling" tab
// 	name	default_rendering_sampling
// 	label	"Default Rendering/Sampling"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_samples
// 	    aps_dorayvariance
// 	    aps_colorspace
// 	    aps_maxnumberofindirectsamples
// 	    aps_minraysamples
// 	    aps_maxraysamples
// 	    aps_variance
//             aps_globalquality
// 	    aps_diffusequality
//             aps_sssquality
// 	    aps_reflectionquality
// 	    aps_refractionquality
// 	    aps_volumequality
// 	    aps_volumesteprate
// 	    aps_volumeshadowsteprate
// 	    aps_volumezerothreshold
// 	    aps_transparent
// 	    aps_transparentsamples
// 	    aps_samplelock
// 	    aps_randomseed
// 	    aps_imageblur
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Sampling" tab
    // aps_samplingsettings
// 	name	unwrap_rendering_sampling
// 	label	"Unwrap Rendering/Sampling"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_samples
// 	    aps_dorayvariance
// 	    aps_colorspace
// 	    aps_maxnumberofindirectsamples
// 	    aps_minraysamples
// 	    aps_maxraysamples
// 	    aps_variance
//             aps_globalquality
//             aps_diffusequality
//             aps_sssquality
// 	    aps_reflectionquality
// 	    aps_refractionquality
// 	    aps_volumequality
// 	    aps_transparent
// 	    aps_transparentsamples
// 	    aps_samplelock
// 	    aps_randomseed
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Limits" tab
// 	name	default_rendering_limits
// 	label	"Default Limits"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_reflectlimit
// 	    aps_refractlimit
// 	    aps_diffuselimit
//             aps_ssslimit
// 	    aps_volumelimit
// 	    aps_opacitylimit
// 	    aps_colorlimit
//             aps_raylimiteval
//             aps_raylimitcomponents
//             aps_raylimitlightmask
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Limits" tab
// 	name	unwrap_rendering_limits
// 	label	"Unwrap Limits"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_reflectlimit
// 	    aps_refractlimit
// 	    aps_diffuselimit
//             aps_ssslimit
// 	    aps_opacitylimit
// 	    aps_colorlimit
//             aps_raylimiteval
//             aps_raylimitcomponents
//             aps_raylimitlightmask
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Shading" tab
// 	name	unwrap_rendering_shading
// 	label	"Unwrap Rendering/Shading"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_raybias
// 	    aps_biasnormal
// 	    aps_nesteddielectric
// 	    aps_pbrpathtype
// 	    aps_constrainmaxrough
// 	    aps_refractcomponents
// 	    aps_diffusecomponents
// 	    aps_volumecomponents
// 	    aps_ssscomponents
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Shading" tab
// 	name	default_rendering_shading
// 	label	"Default Rendering/Shading"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_raybias
// 	    aps_biasnormal
// 	    aps_nesteddielectric
// 	    aps_pbrpathtype
// 	    aps_constrainmaxrough
// 	    aps_refractcomponents
// 	    aps_diffusecomponents
// 	    aps_volumecomponents
// 	    aps_ssscomponents
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Dicing" tab
// 	name	unwrap_rendering_dicing
// 	label	"Unwrap Rendering/Dicing"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_shadingfactor
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Dicing" tab
// 	name	default_rendering_dicing
// 	label	"Default Rendering/Dicing"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_shadingfactor
// 	    aps_motionfactor
// 	    aps_measuring
// 	    aps_measurezimportance
// 	    aps_measureoffscreenquality
// 	    )"
// 	}
//     }
//     parm {
// 	// Parameters for the "Rendering/Statistics" tab
// 	name	default_rendering_statistics
// 	label	"Default Rendering/Statistics"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    soho_spoolrenderoutput
// 	    aps_verbose
// 	    aps_vexprofile
// 	    aps_alfprogress
// 	    aps_tilecallback
// 	    aps_logcolors
// 	    aps_logtimestamps
// 	    )"
// 	}
//     }

//     // Default parameters for full output driver
//     parm {
// 	name	default_output
// 	label	"Default Output"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	R"(
// 	    aps_picture_group
// 	    soho_skip_frame
// 	    aps_pfilter
// 	    aps_sfilter
// 	    aps_quantize
// 	    aps_gamma
// 	    aps_subpixel
// 	    res_fraction
// 	    override_resolution
// 	    aps_tiled_rendering
// 	    aps_writecheckpoint
// 	    aps_readcheckpoint
// 	    aps_deepresolver
// 	    aps_dcmfilename
// 	    aps_dcmcompositing
// 	    aps_dcmdepthplanes
// 	    aps_dsmfilename
// 	    aps_exportcomponents
// 	    aps_cryptolayers

// 	    aps_quickplane_P
// 	    aps_quickplane_Pz
// 	    aps_quickplane_N
// 	    aps_quickplane_all_comp
// 	    aps_quickplane_direct_comp
// 	    aps_quickplane_indirect_comp
// 	    aps_quickplane_all_emission
// 	    aps_quickplane_direct_noshadow
// 	    aps_quickplane_direct_samples
// 	    aps_quickplane_indirect_samples
//             aps_quickplane_sss
//             aps_quickplane_basecolor
//             aps_quickplane_diffcolor
//             aps_quickplane_speccolor
//             aps_quickplane_emitcolor
//             aps_quickplane_ssscolor
//             aps_quickplane_metallic
//             aps_quickplane_specrough
// 	    aps_showextraplaneparms
// 	    aps_numaux

// 	    common_format_options
// 	    aps_image_mplay_direction
// 	    aps_image_mplay_framemode
// 	    aps_image_mplay_label
// 	    aps_image_mplay_gamma
// 	    aps_image_jpeg_quality
// 	    aps_image_tiff_compression
// 	    aps_image_exr_compression

// 	    aps_renderengine
// 	    aps_bucketsize
// 	    aps_opacitylimit
// 	    aps_threads
// 	    aps_cachelimit
// 	    aps_octreestyle
// 	    aps_kdmemfactor
// 	    aps_hidden
// 	    render_viewcamera
// 	    render_any_shadowmap
// 	    render_any_envmap
// 	    render_any_photonmap
// 	    render_any_pointcloud
// 	    aps_otlfullpath
// 	    aps_embedvex

// 	    aps_samples
// 	    aps_dof
// 	    allowmotionblur
// 	    xform_motionsamples
// 	    geo_motionsamples
// 	    aps_motionfactor
// 	    aps_traceblur
// 	    shutteroffset
// 	    aps_imageblur
// 	    aps_samplelock
// 	    aps_dorayvariance
// 	    aps_maxnumberofindirectsamples
// 	    aps_minraysamples
// 	    aps_maxraysamples
// 	    aps_variance
//             aps_globalquality
//             aps_diffusequality
//             aps_sssquality
// 	    aps_reflectionquality
// 	    aps_refractionquality
// 	    aps_volumequality
// 	    aps_volumesteprate
// 	    aps_volumeshadowsteprate
// 	    aps_volumezerothreshold
// 	    aps_transparent
// 	    aps_transparentsamples
// 	    aps_randomseed

// 	    aps_reflectlimit
// 	    aps_refractlimit
// 	    aps_diffuselimit
//             aps_ssslimit
// 	    aps_volumelimit
// 	    aps_refractcomponents
// 	    aps_diffusecomponents
// 	    aps_volumecomponents
// 	    aps_ssscomponents
// 	    aps_raybias
// 	    aps_biasnormal
// 	    aps_nesteddielectric
// 	    aps_colorspace
// 	    aps_raylimiteval
// 	    aps_raylimitcomponents
// 	    aps_raylimitlightmask
// 	    aps_pbrpathtype
// 	    aps_constrainmaxrough
// 	    aps_colorlimit

// 	    aps_pbrshader

// 	    soho_spoolrenderoutput
// 	    aps_verbose
// 	    aps_vexprofile
// 	    aps_alfprogress
// 	    aps_tilecallback
// 	    aps_logcolors
// 	    aps_logtimestamps

// 	    aps_shadingfactor
// 	    aps_measuring

// 	    aps_inlinestorage
// 	    aps_tmpsharedstorage
// 	    aps_tmplocalstorage
// 	    aps_binarygeometry
// 	    aps_savegroups
// 	    )"
// 	}
//     }
// #endif

// #if !defined(USER_DEFINED_IFD_FOG_PARMS)
//     parm {
// 	name	default_fog
// 	label	"Default Fog"
// 	parmtag	{ spare_category	"__spare_parmlist" }
// 	parmtag	{ spare_parmlist	"categories lightmask" }
//     }
// #endif
}

#undef APS_QUANTIZE_MENU
#undef APS_PIXEL_FILTER_MENU
#undef APS_AUX_PIXEL_FILTER_MENU
#undef APS_FILTER_MENU
#undef APS_TYPE_MENU
#undef APS_DISABLE_AUXPLANE
